// main-complete.js - Script principal pour la gestion du site avec fonctionnalit√©s de filtrage int√©gr√©es

// Variables globales
let currentCategory = 'lieux-plein-air';
let currentData = null;

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM charg√©, initialisation du site");
    
    // Charger la cat√©gorie par d√©faut
    loadCategory(currentCategory);
    
    // Ajouter les √©couteurs d'√©v√©nements pour la navigation
    setupNavigation();
    
    // Configurer le bouton de fermeture de la carte
    setupMapControls();
    
    // V√©rifier si nous sommes sur un √©cran de bureau (non-mobile)
    if (window.innerWidth > 768) {
        // Initialiser la carte seulement en mode bureau
        if (window.mapManager && typeof window.mapManager.initMap === 'function') {
            window.mapManager.initMap();
            console.log("Carte initialis√©e en mode bureau");
            
            // Pr√©charger les marqueurs si des donn√©es sont disponibles
            if (window.currentPlaces && window.currentPlaces.length > 0 && 
                window.mapManager.addMarkersForPlaces) {
                window.mapManager.addMarkersForPlaces(window.currentPlaces);
                console.log("Marqueurs ajout√©s √† la carte");
            }
        }
    } else {
        console.log("Mode mobile d√©tect√©, la carte sera initialis√©e lors du premier clic");
    }
});

// Configuration de la navigation
function setupNavigation() {
    const navItems = document.querySelectorAll('.nav-item');
    
    navItems.forEach(item => {
        item.addEventListener('click', function() {
            // Mettre √† jour la classe active
            navItems.forEach(nav => nav.classList.remove('active'));
            this.classList.add('active');
            
            // Charger la nouvelle cat√©gorie
            const category = this.dataset.category;
            loadCategory(category);
        });
    });
    
    console.log("Navigation configur√©e");
}

// Chargement d'une cat√©gorie
async function loadCategory(category) {
    console.log("Chargement de la cat√©gorie:", category);
    
    // Mettre √† jour la cat√©gorie courante
    currentCategory = category;
    
    // Mettre √† jour le titre et la description de la cat√©gorie
    updateCategoryInfo(category);
    
    // Supprimer les filtres existants
    const existingFilters = document.querySelector('.filters-container');
    if (existingFilters) {
        existingFilters.remove();
    }
    
    // Charger les donn√©es
    const data = await window.dataLoader.loadCategoryData(category);
    
    if (data && data.places) {
        console.log("Donn√©es charg√©es avec succ√®s:", data.places.length, "lieux");
        currentData = data;
        
        // Afficher les lieux
        displayPlaces(data.places);
        
        // Ajouter les marqueurs sur la carte seulement si nous sommes en mode bureau
        // ou si la carte est d√©j√† initialis√©e
        if (window.innerWidth > 768 && window.mapManager && 
            typeof window.mapManager.addMarkersForPlaces === 'function' &&
            window.mapManager.isMapInitialized && window.mapManager.isMapInitialized()) {
            console.log("Ajout des marqueurs √† la carte initialis√©e");
            window.mapManager.addMarkersForPlaces(data.places);
        } else {
            console.log("Stockage des donn√©es pour un ajout ult√©rieur des marqueurs");
            // Stocker les donn√©es pour un ajout ult√©rieur des marqueurs
            window.currentPlaces = data.places;
        }
        
        // Ajouter les filtres de date pour la cat√©gorie √©v√©nements
        if (category === 'evenements') {
            addDateFilters();
        }
    } else {
        console.error("Erreur lors du chargement des donn√©es pour", category);
        // G√©rer l'erreur de chargement des donn√©es
        document.getElementById('places-container').innerHTML = `
            <div class="error-message">
                <p>Impossible de charger les donn√©es pour cette cat√©gorie.</p>
            </div>
        `;
        if (window.mapManager && typeof window.mapManager.clearMarkers === 'function') {
            window.mapManager.clearMarkers();
        }
    }
}

// Mise √† jour des informations de cat√©gorie
function updateCategoryInfo(category) {
    const info = window.dataLoader.categoryInfo[category];
    
    if (info) {
        const titleElement = document.querySelector('.category-title h2');
        const descriptionElement = document.querySelector('.category-description');
        
        titleElement.textContent = info.title;
        descriptionElement.textContent = info.description;
    }
}

// Affichage des lieux
function displayPlaces(places) {
    const container = document.getElementById('places-container');
    container.innerHTML = '';
    
    if (places.length === 0) {
        container.innerHTML = `
            <div class="no-results">
                <p>Aucun lieu trouv√© pour cette cat√©gorie.</p>
            </div>
        `;
        return;
    }
    
    console.log("Affichage de", places.length, "lieux");
    
    // Cr√©er une carte pour chaque lieu
    places.forEach((place, index) => {
        const card = createPlaceCard(place, index);
        
        // Ajouter un √©couteur d'√©v√©nements pour le clic sur la carte
        card.addEventListener('click', function() {
            if (window.mapManager && typeof window.mapManager.highlightPlace === 'function') {
                window.mapManager.highlightPlace(index);
            }
        });
        
        // Ajouter un √©couteur d'√©v√©nements pour le survol de la carte
        card.addEventListener('mouseenter', function() {
            if (window.mapManager && typeof window.mapManager.highlightPlace === 'function') {
                window.mapManager.highlightPlace(index);
            }
        });
        
        container.appendChild(card);
    });
}

// Fonction pour cr√©er une carte de lieu
function createPlaceCard(place, index) {
    const card = document.createElement('div');
    card.className = 'place-card';
    card.dataset.index = index;
    
    // Ajouter une classe sp√©cifique √† la carte en fonction de la cat√©gorie
    switch(currentCategory) {
        case 'lieux-plein-air': card.classList.add('card-plein-air'); break;
        case 'lieux-originaux': card.classList.add('card-originaux'); break;
        case 'evenements': card.classList.add('card-evenements'); break;
        case 'restos-uniques': card.classList.add('card-restos'); break;
        case 'nightlife': card.classList.add('card-nightlife'); break;
    }
    
    // Utiliser une image par d√©faut si l'image sp√©cifi√©e n'existe pas
    const imagePath = `images/${place.image}`;
    const imageUrl = place.image ? imagePath : 'images/default-place.jpg';
    
    // D√©terminer la classe de badge en fonction de la cat√©gorie
    let badgeClass = '';
    switch(currentCategory) {
        case 'lieux-plein-air': badgeClass = 'plein-air'; break;
        case 'lieux-originaux': badgeClass = 'originaux'; break;
        case 'evenements': badgeClass = 'evenements'; break;
        case 'restos-uniques': badgeClass = 'restos'; break;
        case 'nightlife': badgeClass = 'nightlife'; break;
    }
    
    card.innerHTML = `
        <div class="place-info">
            <div class="category-badge ${badgeClass}">${window.dataLoader.categoryInfo[currentCategory].title}</div>
            <h3 class="place-title">${place.title}</h3>
            <p class="place-description">${place.description}</p>
            <div class="place-details">
                <div class="detail-item">
                    <span class="detail-icon">üìç</span>
                    <span>${place.address}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-icon">üåü</span>
                    <span>${place.uniqueness}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-icon">‚è∞</span>
                    <span>${place.best_time}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-icon">üé≠</span>
                    <span>${place.ambiance}</span>
                </div>
                ${place.dates ? `
                <div class="detail-item">
                    <span class="detail-icon">üìÖ</span>
                    <span>${place.dates}</span>
                </div>` : ''}
                ${place.info ? `
                <div class="detail-item">
                    <span class="detail-icon">‚ÑπÔ∏è</span>
                    <span>${place.info}</span>
                </div>` : ''}
            </div>
        </div>
    `;
    
    // Ajouter les gestionnaires d'√©v√©nements apr√®s avoir d√©fini innerHTML
    // Ajouter un gestionnaire d'√©v√©nements pour le survol
    card.addEventListener('mouseenter', function() {
        if (window.mapManager && typeof window.mapManager.highlightPlace === 'function') {
            window.mapManager.highlightPlace(index);
        }
    });
    
    // Ajouter un gestionnaire d'√©v√©nements pour le clic (pour afficher la carte en mode mobile)
    card.addEventListener('click', function(event) {
        console.log('Card clicked, window width:', window.innerWidth);
        // V√©rifier si on est en mode mobile (largeur d'√©cran <= 768px)
        if (window.innerWidth <= 768) {
            console.log('Mobile mode detected, showing map');
            // Mettre en √©vidence le lieu sur la carte
            if (window.mapManager && typeof window.mapManager.highlightPlace === 'function') {
                window.mapManager.highlightPlace(index);
            }
            
            // Impl√©menter le pattern liste-d√©tail pour le mode mobile
            const mapContainer = document.querySelector('.map-container');
            console.log('Map container found:', mapContainer);
            
            // V√©rifier si la carte est d√©j√† initialis√©e
            let isMapInitialized = window.mapManager && window.mapManager.isMapInitialized && window.mapManager.isMapInitialized();
            console.log('Is map already initialized:', isMapInitialized);
            
            // Ajouter les classes pour afficher la carte
            mapContainer.classList.add('active');
            document.body.classList.add('map-active');
            
            // Attendre que le conteneur de la carte soit visible avant d'initialiser
            setTimeout(() => {
                console.log('D√©lai termin√©, initialisation de la carte');
                
                // Forcer le conteneur de la carte √† avoir des dimensions
                const mapContainer = document.getElementById('map');
                if (mapContainer) {
                    console.log("Dimensions du conteneur avant initialisation:", 
                              mapContainer.offsetWidth, "x", mapContainer.offsetHeight);
                    
                    // S'assurer que le conteneur a des dimensions suffisantes
                    if (mapContainer.offsetWidth < 10 || mapContainer.offsetHeight < 10) {
                        mapContainer.style.width = "100%";
                        mapContainer.style.height = "100vh";
                        // Forcer un reflow du DOM
                        mapContainer.getBoundingClientRect();
                    }
                }
                
                // Si nous sommes en mode mobile et que la carte n'est pas encore initialis√©e
                if (window.innerWidth <= 768 && !isMapInitialized) {
                    console.log('Initializing map for the first time in mobile mode');
                    
                    // Initialiser la carte
                    if (window.mapManager && typeof window.mapManager.initMap === 'function') {
                        window.mapManager.initMap();
                        console.log('Carte initialis√©e en mode mobile');
                        
                        // Ajouter les marqueurs apr√®s l'initialisation
                        if (window.currentPlaces && window.currentPlaces.length > 0 && 
                            window.mapManager.addMarkersForPlaces) {
                            console.log('Ajout des marqueurs √† la carte mobile');
                            window.mapManager.addMarkersForPlaces(window.currentPlaces);
                        }
                    }
                }
                
                // Mettre en √©vidence le lieu sur la carte apr√®s un court d√©lai suppl√©mentaire
                setTimeout(() => {
                    if (window.mapManager && typeof window.mapManager.highlightPlace === 'function') {
                        window.mapManager.highlightPlace(index);
                        console.log('Place highlighted on map');
                    }
                    
                    // Mettre √† jour la carte
                    if (window.mapManager && typeof window.mapManager.updateMap === 'function') {
                        window.mapManager.updateMap();
                        console.log('Map updated');
                    }
                }, 100);
            }, 300); // D√©lai pour s'assurer que le conteneur est visible
        }
    });
    
    return card;
}

// Fonction pour ajouter des filtres de date pour les √©v√©nements
function addDateFilters() {
    console.log("Ajout des filtres de date pour les √©v√©nements");
    
    // V√©rifier si nous sommes sur la cat√©gorie √©v√©nements
    if (currentCategory !== 'evenements') return;
    
    // Cr√©er le conteneur de filtres s'il n'existe pas d√©j√†
    let filtersContainer = document.querySelector('.filters-container');
    if (!filtersContainer) {
        const categoryTitle = document.querySelector('.category-title');
        filtersContainer = document.createElement('div');
        filtersContainer.className = 'filters-container';
        categoryTitle.after(filtersContainer);
    }
    
    // D√©finir les dates du s√©jour (14-17 avril 2025)
    const dates = [
        { day: 14, month: 'avril', year: 2025, label: 'Lundi 14 avril' },
        { day: 15, month: 'avril', year: 2025, label: 'Mardi 15 avril' },
        { day: 16, month: 'avril', year: 2025, label: 'Mercredi 16 avril' },
        { day: 17, month: 'avril', year: 2025, label: 'Jeudi 17 avril' },
        { day: 0, month: '', year: 0, label: 'Tous les jours' }
    ];
    
    // Cr√©er le contenu HTML des filtres
    filtersContainer.innerHTML = `
        <h3 class="filters-title">Filtrer par date</h3>
        <div class="date-filters">
            ${dates.map((date, index) => `
                <div class="date-filter-item ${index === dates.length - 1 ? 'active' : ''}" 
                     data-day="${date.day}" 
                     data-month="${date.month}" 
                     data-year="${date.year}">
                    ${date.label}
                </div>
            `).join('')}
        </div>
    `;
    
    // Ajouter les √©couteurs d'√©v√©nements pour les filtres
    const filterItems = document.querySelectorAll('.date-filter-item');
    filterItems.forEach(item => {
        item.addEventListener('click', function() {
            // Mettre √† jour la classe active
            filterItems.forEach(filter => filter.classList.remove('active'));
            this.classList.add('active');
            
            // Filtrer les √©v√©nements
            const day = parseInt(this.dataset.day);
            if (day === 0) {
                // Afficher tous les √©v√©nements
                displayPlaces(currentData.places);
                if (window.mapManager && typeof window.mapManager.addMarkersForPlaces === 'function') {
                    window.mapManager.addMarkersForPlaces(currentData.places);
                }
            } else {
                // Filtrer les √©v√©nements pour cette date
                filterEventsByDate(day, this.dataset.month, parseInt(this.dataset.year));
            }
        });
    });
}

// Fonction pour filtrer les √©v√©nements par date
function filterEventsByDate(day, month, year) {
    console.log("Filtrage des √©v√©nements pour le", day, month, year);
    
    if (!currentData || !currentData.places || currentCategory !== 'evenements') {
        return;
    }
    
    // Filtrer les √©v√©nements qui ont lieu √† la date sp√©cifi√©e
    const filteredEvents = currentData.places.filter(place => {
        if (!place.dates) return false;
        
        const dateStr = place.dates.toLowerCase();
        
        // V√©rifier si l'√©v√©nement a lieu pendant la p√©riode sp√©cifi√©e
        if (dateStr.includes(`${day} ${month}`) || 
            dateStr.includes(`${day}-${day+3} ${month}`) || 
            dateStr.includes(`${day-1}-${day} ${month}`) ||
            dateStr.includes(`${day}-${day+1} ${month}`) ||
            dateStr.includes(`${day}-${day+2} ${month}`)) {
            return true;
        }
        
        // V√©rifier les p√©riodes (ex: "14-17 avril 2025")
        if (dateStr.includes('-')) {
            const parts = dateStr.split('-');
            if (parts.length === 2) {
                const startDay = parseInt(parts[0].trim());
                const endParts = parts[1].trim().split(' ');
                const endDay = parseInt(endParts[0]);
                
                // Si le jour sp√©cifi√© est dans la plage
                if (day >= startDay && day <= endDay) {
                    return true;
                }
            }
        }
        
        // V√©rifier "exposition en cours"
        if (dateStr.includes('exposition en cours') || dateStr.includes('en cours')) {
            return true;
        }
        
        return false;
    });
    
    console.log("√âv√©nements filtr√©s:", filteredEvents.length, "trouv√©s");
    
    // Afficher les √©v√©nements filtr√©s
    displayPlaces(filteredEvents);
    if (window.mapManager && typeof window.mapManager.addMarkersForPlaces === 'function') {
        window.mapManager.addMarkersForPlaces(filteredEvents);
    }
}

// Fonction pour configurer les contr√¥les de la carte (bouton de fermeture)
function setupMapControls() {
    console.log('Setting up map controls');
    const closeMapBtn = document.getElementById('close-map-btn');
    console.log('Close map button found:', closeMapBtn);
    
    if (closeMapBtn) {
        closeMapBtn.addEventListener('click', function(event) {
            console.log('Close map button clicked');
            event.preventDefault();
            event.stopPropagation();
            
            const mapContainer = document.querySelector('.map-container');
            console.log('Map container before closing:', mapContainer.className);
            
            // Retirer la classe active pour faire glisser la carte hors √©cran
            mapContainer.classList.remove('active');
            
            // Retirer la classe du body pour ramener le contenu √† l'√©cran
            document.body.classList.remove('map-active');
            
            console.log('Map container after closing:', mapContainer.className);
        });
    } else {
        console.error('Close map button not found in the DOM');
    }
    
    // Ajouter un √©couteur pour les changements de taille d'√©cran
    window.addEventListener('resize', function() {
        // Si on passe en mode desktop, s'assurer que la carte est visible
        if (window.innerWidth > 768) {
            const mapContainer = document.querySelector('.map-container');
            mapContainer.classList.remove('active');
            console.log('Resized to desktop, removed active class from map container');
        }
    });
    
    // V√©rifier l'√©tat initial
    const mapContainer = document.querySelector('.map-container');
    if (mapContainer) {
        console.log('Initial map container state:', mapContainer.className);
        console.log('Initial window width:', window.innerWidth);
    } else {
        console.error('Map container not found in the DOM');
    }
}

console.log("Script principal charg√© avec succ√®s");
